// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warrior.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "warrior.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* WarriorDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarriorDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarriorFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarriorFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarriorJuniorFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarriorJuniorFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarriorSeniorFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarriorSeniorFields_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WarriorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_warrior_2eproto() {
  protobuf_AddDesc_warrior_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "warrior.proto");
  GOOGLE_CHECK(file != NULL);
  WarriorDescription_descriptor_ = file->message_type(0);
  static const int WarriorDescription_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, attack_range_),
  };
  WarriorDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarriorDescription_descriptor_,
      WarriorDescription::default_instance_,
      WarriorDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarriorDescription));
  WarriorFields_descriptor_ = file->message_type(1);
  static const int WarriorFields_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, host_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, move_speed_),
  };
  WarriorFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarriorFields_descriptor_,
      WarriorFields::default_instance_,
      WarriorFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarriorFields));
  WarriorJuniorFields_descriptor_ = file->message_type(2);
  static const int WarriorJuniorFields_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, attack_range_),
  };
  WarriorJuniorFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarriorJuniorFields_descriptor_,
      WarriorJuniorFields::default_instance_,
      WarriorJuniorFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorJuniorFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarriorJuniorFields));
  WarriorSeniorFields_descriptor_ = file->message_type(3);
  static const int WarriorSeniorFields_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, max_hp_add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, max_hp_add_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, attack_add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, attack_add_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, defence_add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, defence_add_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, move_speed_add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, move_speed_add_per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, attack_speed_add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, attack_speed_add_per_),
  };
  WarriorSeniorFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarriorSeniorFields_descriptor_,
      WarriorSeniorFields::default_instance_,
      WarriorSeniorFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarriorSeniorFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarriorSeniorFields));
  WarriorType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_warrior_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarriorDescription_descriptor_, &WarriorDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarriorFields_descriptor_, &WarriorFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarriorJuniorFields_descriptor_, &WarriorJuniorFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarriorSeniorFields_descriptor_, &WarriorSeniorFields::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_warrior_2eproto() {
  delete WarriorDescription::default_instance_;
  delete WarriorDescription_reflection_;
  delete WarriorFields::default_instance_;
  delete WarriorFields_reflection_;
  delete WarriorJuniorFields::default_instance_;
  delete WarriorJuniorFields_reflection_;
  delete WarriorSeniorFields::default_instance_;
  delete WarriorSeniorFields_reflection_;
}

void protobuf_AddDesc_warrior_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwarrior.proto\022\010protocol\"\237\001\n\022WarriorDes"
    "cription\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006ma"
    "x_hp\030\003 \001(\005\022\016\n\006attack\030\004 \001(\005\022\017\n\007defence\030\005 "
    "\001(\005\022\022\n\nmove_speed\030\006 \001(\005\022\024\n\014attack_speed\030"
    "\007 \001(\005\022\024\n\014attack_range\030\010 \001(\005\"\262\001\n\rWarriorF"
    "ields\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\017\n\007host_"
    "id\030\003 \001(\004\022\017\n\007camp_id\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\016\n"
    "\006max_hp\030\006 \001(\005\022\016\n\006attack\030\007 \001(\005\022\017\n\007defence"
    "\030\010 \001(\005\022\024\n\014attack_speed\030\t \001(\005\022\022\n\nmove_spe"
    "ed\030\n \001(\005\"\206\001\n\023WarriorJuniorFields\022\016\n\006max_"
    "hp\030\001 \001(\005\022\016\n\006attack\030\002 \001(\005\022\017\n\007defence\030\003 \001("
    "\005\022\022\n\nmove_speed\030\004 \001(\005\022\024\n\014attack_speed\030\005 "
    "\001(\005\022\024\n\014attack_range\030\006 \001(\005\"\245\002\n\023WarriorSen"
    "iorFields\022\030\n\020max_hp_add_value\030\001 \001(\005\022\026\n\016m"
    "ax_hp_add_per\030\002 \001(\005\022\030\n\020attack_add_value\030"
    "\003 \001(\005\022\026\n\016attack_add_per\030\004 \001(\005\022\031\n\021defence"
    "_add_value\030\005 \001(\005\022\027\n\017defence_add_per\030\006 \001("
    "\005\022\034\n\024move_speed_add_value\030\007 \001(\005\022\032\n\022move_"
    "speed_add_per\030\010 \001(\005\022\036\n\026attack_speed_add_"
    "value\030\t \001(\005\022\034\n\024attack_speed_add_per\030\n \001("
    "\005*\371\001\n\013WarriorType\022\024\n\020WARRIOR_TYPE_MIN\020\000\022"
    "\037\n\033WARRIOR_TYPE_SHORT_INFANTRY\020\001\022!\n\035WARR"
    "IOR_TYPE_SHOOTER_INFANTRY\020\002\022 \n\034WARRIOR_T"
    "YPE_SNIPER_INFANTRY\020\003\022\036\n\032WARRIOR_TYPE_LI"
    "GHT_CAVALRY\020\004\022\036\n\032WARRIOR_TYPE_HEAVY_CAVA"
    "LRY\020\005\022\030\n\024WARRIOR_TYPE_THROWER\020\006\022\024\n\020WARRI"
    "OR_TYPE_MAX\020\007", 1053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "warrior.proto", &protobuf_RegisterTypes);
  WarriorDescription::default_instance_ = new WarriorDescription();
  WarriorFields::default_instance_ = new WarriorFields();
  WarriorJuniorFields::default_instance_ = new WarriorJuniorFields();
  WarriorSeniorFields::default_instance_ = new WarriorSeniorFields();
  WarriorDescription::default_instance_->InitAsDefaultInstance();
  WarriorFields::default_instance_->InitAsDefaultInstance();
  WarriorJuniorFields::default_instance_->InitAsDefaultInstance();
  WarriorSeniorFields::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_warrior_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_warrior_2eproto {
  StaticDescriptorInitializer_warrior_2eproto() {
    protobuf_AddDesc_warrior_2eproto();
  }
} static_descriptor_initializer_warrior_2eproto_;
const ::google::protobuf::EnumDescriptor* WarriorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarriorType_descriptor_;
}
bool WarriorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WarriorDescription::kIdFieldNumber;
const int WarriorDescription::kTypeFieldNumber;
const int WarriorDescription::kMaxHpFieldNumber;
const int WarriorDescription::kAttackFieldNumber;
const int WarriorDescription::kDefenceFieldNumber;
const int WarriorDescription::kMoveSpeedFieldNumber;
const int WarriorDescription::kAttackSpeedFieldNumber;
const int WarriorDescription::kAttackRangeFieldNumber;
#endif  // !_MSC_VER

WarriorDescription::WarriorDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarriorDescription::InitAsDefaultInstance() {
}

WarriorDescription::WarriorDescription(const WarriorDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarriorDescription::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  max_hp_ = 0;
  attack_ = 0;
  defence_ = 0;
  move_speed_ = 0;
  attack_speed_ = 0;
  attack_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarriorDescription::~WarriorDescription() {
  SharedDtor();
}

void WarriorDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarriorDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarriorDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarriorDescription_descriptor_;
}

const WarriorDescription& WarriorDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warrior_2eproto();
  return *default_instance_;
}

WarriorDescription* WarriorDescription::default_instance_ = NULL;

WarriorDescription* WarriorDescription::New() const {
  return new WarriorDescription;
}

void WarriorDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    max_hp_ = 0;
    attack_ = 0;
    defence_ = 0;
    move_speed_ = 0;
    attack_speed_ = 0;
    attack_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarriorDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_hp;
        break;
      }

      // optional int32 max_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack;
        break;
      }

      // optional int32 attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defence;
        break;
      }

      // optional int32 defence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack_speed;
        break;
      }

      // optional int32 attack_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attack_range;
        break;
      }

      // optional int32 attack_range = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_range_)));
          set_has_attack_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarriorDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 max_hp = 3;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_hp(), output);
  }

  // optional int32 attack = 4;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack(), output);
  }

  // optional int32 defence = 5;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defence(), output);
  }

  // optional int32 move_speed = 6;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->move_speed(), output);
  }

  // optional int32 attack_speed = 7;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack_speed(), output);
  }

  // optional int32 attack_range = 8;
  if (has_attack_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attack_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarriorDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 max_hp = 3;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_hp(), target);
  }

  // optional int32 attack = 4;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack(), target);
  }

  // optional int32 defence = 5;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defence(), target);
  }

  // optional int32 move_speed = 6;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->move_speed(), target);
  }

  // optional int32 attack_speed = 7;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attack_speed(), target);
  }

  // optional int32 attack_range = 8;
  if (has_attack_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attack_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarriorDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 max_hp = 3;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

    // optional int32 attack = 4;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 defence = 5;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

    // optional int32 move_speed = 6;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional int32 attack_speed = 7;
    if (has_attack_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed());
    }

    // optional int32 attack_range = 8;
    if (has_attack_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarriorDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarriorDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarriorDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarriorDescription::MergeFrom(const WarriorDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
    if (from.has_attack_range()) {
      set_attack_range(from.attack_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarriorDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarriorDescription::CopyFrom(const WarriorDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarriorDescription::IsInitialized() const {

  return true;
}

void WarriorDescription::Swap(WarriorDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(attack_range_, other->attack_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarriorDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarriorDescription_descriptor_;
  metadata.reflection = WarriorDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarriorFields::kIdFieldNumber;
const int WarriorFields::kTypeFieldNumber;
const int WarriorFields::kHostIdFieldNumber;
const int WarriorFields::kCampIdFieldNumber;
const int WarriorFields::kHpFieldNumber;
const int WarriorFields::kMaxHpFieldNumber;
const int WarriorFields::kAttackFieldNumber;
const int WarriorFields::kDefenceFieldNumber;
const int WarriorFields::kAttackSpeedFieldNumber;
const int WarriorFields::kMoveSpeedFieldNumber;
#endif  // !_MSC_VER

WarriorFields::WarriorFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarriorFields::InitAsDefaultInstance() {
}

WarriorFields::WarriorFields(const WarriorFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarriorFields::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  host_id_ = GOOGLE_ULONGLONG(0);
  camp_id_ = 0;
  hp_ = 0;
  max_hp_ = 0;
  attack_ = 0;
  defence_ = 0;
  attack_speed_ = 0;
  move_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarriorFields::~WarriorFields() {
  SharedDtor();
}

void WarriorFields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarriorFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarriorFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarriorFields_descriptor_;
}

const WarriorFields& WarriorFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warrior_2eproto();
  return *default_instance_;
}

WarriorFields* WarriorFields::default_instance_ = NULL;

WarriorFields* WarriorFields::New() const {
  return new WarriorFields;
}

void WarriorFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    host_id_ = GOOGLE_ULONGLONG(0);
    camp_id_ = 0;
    hp_ = 0;
    max_hp_ = 0;
    attack_ = 0;
    defence_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attack_speed_ = 0;
    move_speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarriorFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_host_id;
        break;
      }

      // optional uint64 host_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_camp_id;
        break;
      }

      // optional int32 camp_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_hp;
        break;
      }

      // optional int32 max_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack;
        break;
      }

      // optional int32 attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defence;
        break;
      }

      // optional int32 defence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attack_speed;
        break;
      }

      // optional int32 attack_speed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarriorFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 host_id = 3;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->host_id(), output);
  }

  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp_id(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_hp(), output);
  }

  // optional int32 attack = 7;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attack(), output);
  }

  // optional int32 defence = 8;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->defence(), output);
  }

  // optional int32 attack_speed = 9;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attack_speed(), output);
  }

  // optional int32 move_speed = 10;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->move_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarriorFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 host_id = 3;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->host_id(), target);
  }

  // optional int32 camp_id = 4;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp_id(), target);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_hp(), target);
  }

  // optional int32 attack = 7;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attack(), target);
  }

  // optional int32 defence = 8;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->defence(), target);
  }

  // optional int32 attack_speed = 9;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attack_speed(), target);
  }

  // optional int32 move_speed = 10;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->move_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarriorFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 host_id = 3;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->host_id());
    }

    // optional int32 camp_id = 4;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 max_hp = 6;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

    // optional int32 attack = 7;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 defence = 8;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 attack_speed = 9;
    if (has_attack_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed());
    }

    // optional int32 move_speed = 10;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarriorFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarriorFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarriorFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarriorFields::MergeFrom(const WarriorFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarriorFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarriorFields::CopyFrom(const WarriorFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarriorFields::IsInitialized() const {

  return true;
}

void WarriorFields::Swap(WarriorFields* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(host_id_, other->host_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarriorFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarriorFields_descriptor_;
  metadata.reflection = WarriorFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarriorJuniorFields::kMaxHpFieldNumber;
const int WarriorJuniorFields::kAttackFieldNumber;
const int WarriorJuniorFields::kDefenceFieldNumber;
const int WarriorJuniorFields::kMoveSpeedFieldNumber;
const int WarriorJuniorFields::kAttackSpeedFieldNumber;
const int WarriorJuniorFields::kAttackRangeFieldNumber;
#endif  // !_MSC_VER

WarriorJuniorFields::WarriorJuniorFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarriorJuniorFields::InitAsDefaultInstance() {
}

WarriorJuniorFields::WarriorJuniorFields(const WarriorJuniorFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarriorJuniorFields::SharedCtor() {
  _cached_size_ = 0;
  max_hp_ = 0;
  attack_ = 0;
  defence_ = 0;
  move_speed_ = 0;
  attack_speed_ = 0;
  attack_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarriorJuniorFields::~WarriorJuniorFields() {
  SharedDtor();
}

void WarriorJuniorFields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarriorJuniorFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarriorJuniorFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarriorJuniorFields_descriptor_;
}

const WarriorJuniorFields& WarriorJuniorFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warrior_2eproto();
  return *default_instance_;
}

WarriorJuniorFields* WarriorJuniorFields::default_instance_ = NULL;

WarriorJuniorFields* WarriorJuniorFields::New() const {
  return new WarriorJuniorFields;
}

void WarriorJuniorFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_hp_ = 0;
    attack_ = 0;
    defence_ = 0;
    move_speed_ = 0;
    attack_speed_ = 0;
    attack_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarriorJuniorFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attack;
        break;
      }

      // optional int32 attack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence;
        break;
      }

      // optional int32 defence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attack_speed;
        break;
      }

      // optional int32 attack_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attack_range;
        break;
      }

      // optional int32 attack_range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_range_)));
          set_has_attack_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarriorJuniorFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_hp = 1;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_hp(), output);
  }

  // optional int32 attack = 2;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attack(), output);
  }

  // optional int32 defence = 3;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence(), output);
  }

  // optional int32 move_speed = 4;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->move_speed(), output);
  }

  // optional int32 attack_speed = 5;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attack_speed(), output);
  }

  // optional int32 attack_range = 6;
  if (has_attack_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarriorJuniorFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_hp = 1;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_hp(), target);
  }

  // optional int32 attack = 2;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attack(), target);
  }

  // optional int32 defence = 3;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence(), target);
  }

  // optional int32 move_speed = 4;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->move_speed(), target);
  }

  // optional int32 attack_speed = 5;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attack_speed(), target);
  }

  // optional int32 attack_range = 6;
  if (has_attack_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attack_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarriorJuniorFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_hp = 1;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }

    // optional int32 attack = 2;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 defence = 3;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

    // optional int32 move_speed = 4;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional int32 attack_speed = 5;
    if (has_attack_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed());
    }

    // optional int32 attack_range = 6;
    if (has_attack_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarriorJuniorFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarriorJuniorFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarriorJuniorFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarriorJuniorFields::MergeFrom(const WarriorJuniorFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
    if (from.has_attack_range()) {
      set_attack_range(from.attack_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarriorJuniorFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarriorJuniorFields::CopyFrom(const WarriorJuniorFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarriorJuniorFields::IsInitialized() const {

  return true;
}

void WarriorJuniorFields::Swap(WarriorJuniorFields* other) {
  if (other != this) {
    std::swap(max_hp_, other->max_hp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(attack_range_, other->attack_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarriorJuniorFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarriorJuniorFields_descriptor_;
  metadata.reflection = WarriorJuniorFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarriorSeniorFields::kMaxHpAddValueFieldNumber;
const int WarriorSeniorFields::kMaxHpAddPerFieldNumber;
const int WarriorSeniorFields::kAttackAddValueFieldNumber;
const int WarriorSeniorFields::kAttackAddPerFieldNumber;
const int WarriorSeniorFields::kDefenceAddValueFieldNumber;
const int WarriorSeniorFields::kDefenceAddPerFieldNumber;
const int WarriorSeniorFields::kMoveSpeedAddValueFieldNumber;
const int WarriorSeniorFields::kMoveSpeedAddPerFieldNumber;
const int WarriorSeniorFields::kAttackSpeedAddValueFieldNumber;
const int WarriorSeniorFields::kAttackSpeedAddPerFieldNumber;
#endif  // !_MSC_VER

WarriorSeniorFields::WarriorSeniorFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarriorSeniorFields::InitAsDefaultInstance() {
}

WarriorSeniorFields::WarriorSeniorFields(const WarriorSeniorFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarriorSeniorFields::SharedCtor() {
  _cached_size_ = 0;
  max_hp_add_value_ = 0;
  max_hp_add_per_ = 0;
  attack_add_value_ = 0;
  attack_add_per_ = 0;
  defence_add_value_ = 0;
  defence_add_per_ = 0;
  move_speed_add_value_ = 0;
  move_speed_add_per_ = 0;
  attack_speed_add_value_ = 0;
  attack_speed_add_per_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarriorSeniorFields::~WarriorSeniorFields() {
  SharedDtor();
}

void WarriorSeniorFields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarriorSeniorFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarriorSeniorFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarriorSeniorFields_descriptor_;
}

const WarriorSeniorFields& WarriorSeniorFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warrior_2eproto();
  return *default_instance_;
}

WarriorSeniorFields* WarriorSeniorFields::default_instance_ = NULL;

WarriorSeniorFields* WarriorSeniorFields::New() const {
  return new WarriorSeniorFields;
}

void WarriorSeniorFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_hp_add_value_ = 0;
    max_hp_add_per_ = 0;
    attack_add_value_ = 0;
    attack_add_per_ = 0;
    defence_add_value_ = 0;
    defence_add_per_ = 0;
    move_speed_add_value_ = 0;
    move_speed_add_per_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attack_speed_add_value_ = 0;
    attack_speed_add_per_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarriorSeniorFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_hp_add_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_add_value_)));
          set_has_max_hp_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_hp_add_per;
        break;
      }

      // optional int32 max_hp_add_per = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp_add_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_add_per_)));
          set_has_max_hp_add_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack_add_value;
        break;
      }

      // optional int32 attack_add_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_add_value_)));
          set_has_attack_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_add_per;
        break;
      }

      // optional int32 attack_add_per = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_add_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_add_per_)));
          set_has_attack_add_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defence_add_value;
        break;
      }

      // optional int32 defence_add_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_add_value_)));
          set_has_defence_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defence_add_per;
        break;
      }

      // optional int32 defence_add_per = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_add_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_add_per_)));
          set_has_defence_add_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_move_speed_add_value;
        break;
      }

      // optional int32 move_speed_add_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_add_value_)));
          set_has_move_speed_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_move_speed_add_per;
        break;
      }

      // optional int32 move_speed_add_per = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed_add_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_add_per_)));
          set_has_move_speed_add_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attack_speed_add_value;
        break;
      }

      // optional int32 attack_speed_add_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_add_value_)));
          set_has_attack_speed_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attack_speed_add_per;
        break;
      }

      // optional int32 attack_speed_add_per = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed_add_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_add_per_)));
          set_has_attack_speed_add_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarriorSeniorFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_hp_add_value = 1;
  if (has_max_hp_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_hp_add_value(), output);
  }

  // optional int32 max_hp_add_per = 2;
  if (has_max_hp_add_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_hp_add_per(), output);
  }

  // optional int32 attack_add_value = 3;
  if (has_attack_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attack_add_value(), output);
  }

  // optional int32 attack_add_per = 4;
  if (has_attack_add_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_add_per(), output);
  }

  // optional int32 defence_add_value = 5;
  if (has_defence_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defence_add_value(), output);
  }

  // optional int32 defence_add_per = 6;
  if (has_defence_add_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->defence_add_per(), output);
  }

  // optional int32 move_speed_add_value = 7;
  if (has_move_speed_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->move_speed_add_value(), output);
  }

  // optional int32 move_speed_add_per = 8;
  if (has_move_speed_add_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->move_speed_add_per(), output);
  }

  // optional int32 attack_speed_add_value = 9;
  if (has_attack_speed_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attack_speed_add_value(), output);
  }

  // optional int32 attack_speed_add_per = 10;
  if (has_attack_speed_add_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attack_speed_add_per(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarriorSeniorFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_hp_add_value = 1;
  if (has_max_hp_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_hp_add_value(), target);
  }

  // optional int32 max_hp_add_per = 2;
  if (has_max_hp_add_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_hp_add_per(), target);
  }

  // optional int32 attack_add_value = 3;
  if (has_attack_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attack_add_value(), target);
  }

  // optional int32 attack_add_per = 4;
  if (has_attack_add_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack_add_per(), target);
  }

  // optional int32 defence_add_value = 5;
  if (has_defence_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defence_add_value(), target);
  }

  // optional int32 defence_add_per = 6;
  if (has_defence_add_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->defence_add_per(), target);
  }

  // optional int32 move_speed_add_value = 7;
  if (has_move_speed_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->move_speed_add_value(), target);
  }

  // optional int32 move_speed_add_per = 8;
  if (has_move_speed_add_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->move_speed_add_per(), target);
  }

  // optional int32 attack_speed_add_value = 9;
  if (has_attack_speed_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attack_speed_add_value(), target);
  }

  // optional int32 attack_speed_add_per = 10;
  if (has_attack_speed_add_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attack_speed_add_per(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarriorSeniorFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_hp_add_value = 1;
    if (has_max_hp_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp_add_value());
    }

    // optional int32 max_hp_add_per = 2;
    if (has_max_hp_add_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp_add_per());
    }

    // optional int32 attack_add_value = 3;
    if (has_attack_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_add_value());
    }

    // optional int32 attack_add_per = 4;
    if (has_attack_add_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_add_per());
    }

    // optional int32 defence_add_value = 5;
    if (has_defence_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_add_value());
    }

    // optional int32 defence_add_per = 6;
    if (has_defence_add_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_add_per());
    }

    // optional int32 move_speed_add_value = 7;
    if (has_move_speed_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed_add_value());
    }

    // optional int32 move_speed_add_per = 8;
    if (has_move_speed_add_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed_add_per());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 attack_speed_add_value = 9;
    if (has_attack_speed_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed_add_value());
    }

    // optional int32 attack_speed_add_per = 10;
    if (has_attack_speed_add_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed_add_per());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarriorSeniorFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarriorSeniorFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarriorSeniorFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarriorSeniorFields::MergeFrom(const WarriorSeniorFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_hp_add_value()) {
      set_max_hp_add_value(from.max_hp_add_value());
    }
    if (from.has_max_hp_add_per()) {
      set_max_hp_add_per(from.max_hp_add_per());
    }
    if (from.has_attack_add_value()) {
      set_attack_add_value(from.attack_add_value());
    }
    if (from.has_attack_add_per()) {
      set_attack_add_per(from.attack_add_per());
    }
    if (from.has_defence_add_value()) {
      set_defence_add_value(from.defence_add_value());
    }
    if (from.has_defence_add_per()) {
      set_defence_add_per(from.defence_add_per());
    }
    if (from.has_move_speed_add_value()) {
      set_move_speed_add_value(from.move_speed_add_value());
    }
    if (from.has_move_speed_add_per()) {
      set_move_speed_add_per(from.move_speed_add_per());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attack_speed_add_value()) {
      set_attack_speed_add_value(from.attack_speed_add_value());
    }
    if (from.has_attack_speed_add_per()) {
      set_attack_speed_add_per(from.attack_speed_add_per());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarriorSeniorFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarriorSeniorFields::CopyFrom(const WarriorSeniorFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarriorSeniorFields::IsInitialized() const {

  return true;
}

void WarriorSeniorFields::Swap(WarriorSeniorFields* other) {
  if (other != this) {
    std::swap(max_hp_add_value_, other->max_hp_add_value_);
    std::swap(max_hp_add_per_, other->max_hp_add_per_);
    std::swap(attack_add_value_, other->attack_add_value_);
    std::swap(attack_add_per_, other->attack_add_per_);
    std::swap(defence_add_value_, other->defence_add_value_);
    std::swap(defence_add_per_, other->defence_add_per_);
    std::swap(move_speed_add_value_, other->move_speed_add_value_);
    std::swap(move_speed_add_per_, other->move_speed_add_per_);
    std::swap(attack_speed_add_value_, other->attack_speed_add_value_);
    std::swap(attack_speed_add_per_, other->attack_speed_add_per_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarriorSeniorFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarriorSeniorFields_descriptor_;
  metadata.reflection = WarriorSeniorFields_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
