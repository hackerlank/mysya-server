// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {
namespace orcas {
namespace combat {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CombatRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatCampData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatCampData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatInitialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatInitialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatDeployRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatDeployRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatDeployResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatDeployResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatConnectArgentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatConnectArgentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatConnectArgentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatConnectArgentResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageCombatConnectArgentResponse_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatArgentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatArgentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageCombatArgentSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageCombatArgentSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CombatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CombatDeployResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  CombatRoleData_descriptor_ = file->message_type(0);
  static const int CombatRoleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatRoleData, argent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatRoleData, ai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatRoleData, warrior_),
  };
  CombatRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatRoleData_descriptor_,
      CombatRoleData::default_instance_,
      CombatRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatRoleData));
  CombatCampData_descriptor_ = file->message_type(1);
  static const int CombatCampData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCampData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCampData, role_),
  };
  CombatCampData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatCampData_descriptor_,
      CombatCampData::default_instance_,
      CombatCampData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCampData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatCampData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatCampData));
  CombatInitialData_descriptor_ = file->message_type(2);
  static const int CombatInitialData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatInitialData, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatInitialData, combat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatInitialData, camp_),
  };
  CombatInitialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatInitialData_descriptor_,
      CombatInitialData::default_instance_,
      CombatInitialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatInitialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatInitialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatInitialData));
  MessageCombatDeployRequest_descriptor_ = file->message_type(3);
  static const int MessageCombatDeployRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployRequest, host_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployRequest, combat_initial_data_),
  };
  MessageCombatDeployRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatDeployRequest_descriptor_,
      MessageCombatDeployRequest::default_instance_,
      MessageCombatDeployRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatDeployRequest));
  MessageCombatDeployResponse_descriptor_ = file->message_type(4);
  static const int MessageCombatDeployResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployResponse, host_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployResponse, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployResponse, combat_id_),
  };
  MessageCombatDeployResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatDeployResponse_descriptor_,
      MessageCombatDeployResponse::default_instance_,
      MessageCombatDeployResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatDeployResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatDeployResponse));
  MessageCombatConnectArgentRequest_descriptor_ = file->message_type(5);
  static const int MessageCombatConnectArgentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentRequest, argent_id_),
  };
  MessageCombatConnectArgentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatConnectArgentRequest_descriptor_,
      MessageCombatConnectArgentRequest::default_instance_,
      MessageCombatConnectArgentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatConnectArgentRequest));
  MessageCombatConnectArgentResponse_descriptor_ = file->message_type(6);
  static const int MessageCombatConnectArgentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentResponse, ret_code_),
  };
  MessageCombatConnectArgentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatConnectArgentResponse_descriptor_,
      MessageCombatConnectArgentResponse::default_instance_,
      MessageCombatConnectArgentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatConnectArgentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatConnectArgentResponse));
  MessageCombatConnectArgentResponse_ErrorCode_descriptor_ = MessageCombatConnectArgentResponse_descriptor_->enum_type(0);
  MessageCombatArgentRequest_descriptor_ = file->message_type(7);
  static const int MessageCombatArgentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentRequest, data_),
  };
  MessageCombatArgentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatArgentRequest_descriptor_,
      MessageCombatArgentRequest::default_instance_,
      MessageCombatArgentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatArgentRequest));
  MessageCombatArgentSync_descriptor_ = file->message_type(8);
  static const int MessageCombatArgentSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentSync, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentSync, data_),
  };
  MessageCombatArgentSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageCombatArgentSync_descriptor_,
      MessageCombatArgentSync::default_instance_,
      MessageCombatArgentSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageCombatArgentSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageCombatArgentSync));
  CombatType_descriptor_ = file->enum_type(0);
  CombatDeployResultType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatRoleData_descriptor_, &CombatRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatCampData_descriptor_, &CombatCampData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatInitialData_descriptor_, &CombatInitialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatDeployRequest_descriptor_, &MessageCombatDeployRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatDeployResponse_descriptor_, &MessageCombatDeployResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatConnectArgentRequest_descriptor_, &MessageCombatConnectArgentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatConnectArgentResponse_descriptor_, &MessageCombatConnectArgentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatArgentRequest_descriptor_, &MessageCombatArgentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageCombatArgentSync_descriptor_, &MessageCombatArgentSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete CombatRoleData::default_instance_;
  delete CombatRoleData_reflection_;
  delete CombatCampData::default_instance_;
  delete CombatCampData_reflection_;
  delete CombatInitialData::default_instance_;
  delete CombatInitialData_reflection_;
  delete MessageCombatDeployRequest::default_instance_;
  delete MessageCombatDeployRequest_reflection_;
  delete MessageCombatDeployResponse::default_instance_;
  delete MessageCombatDeployResponse_reflection_;
  delete MessageCombatConnectArgentRequest::default_instance_;
  delete MessageCombatConnectArgentRequest_reflection_;
  delete MessageCombatConnectArgentResponse::default_instance_;
  delete MessageCombatConnectArgentResponse_reflection_;
  delete MessageCombatArgentRequest::default_instance_;
  delete MessageCombatArgentRequest_reflection_;
  delete MessageCombatArgentSync::default_instance_;
  delete MessageCombatArgentSync_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_warrior_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\036tutorial.orcas.combat.p"
    "rotocol\032\rwarrior.proto\"^\n\016CombatRoleData"
    "\022\021\n\targent_id\030\001 \002(\004\022\n\n\002ai\030\002 \002(\t\022-\n\007warri"
    "or\030\003 \003(\0132\034.protocol.WarriorDescription\"Z"
    "\n\016CombatCampData\022\n\n\002id\030\001 \002(\005\022<\n\004role\030\002 \003"
    "(\0132..tutorial.orcas.combat.protocol.Comb"
    "atRoleData\"v\n\021CombatInitialData\022\016\n\006map_i"
    "d\030\001 \002(\005\022\023\n\013combat_type\030\002 \002(\005\022<\n\004camp\030\003 \003"
    "(\0132..tutorial.orcas.combat.protocol.Comb"
    "atCampData\"}\n\032MessageCombatDeployRequest"
    "\022\017\n\007host_id\030\001 \002(\005\022N\n\023combat_initial_data"
    "\030\002 \002(\01321.tutorial.orcas.combat.protocol."
    "CombatInitialData\"V\n\033MessageCombatDeploy"
    "Response\022\017\n\007host_id\030\001 \002(\005\022\023\n\013result_type"
    "\030\002 \002(\005\022\021\n\tcombat_id\030\003 \001(\005\"6\n!MessageComb"
    "atConnectArgentRequest\022\021\n\targent_id\030\001 \002("
    "\004\"}\n\"MessageCombatConnectArgentResponse\022"
    "\020\n\010ret_code\030\001 \002(\005\"E\n\tErrorCode\022\027\n\023ERROR_"
    "CODE_COMPLETE\020\000\022\037\n\022ERROR_CODE_FAILURE\020\377\377"
    "\377\377\377\377\377\377\377\001\"8\n\032MessageCombatArgentRequest\022\014"
    "\n\004type\030\001 \002(\t\022\014\n\004data\030\002 \002(\014\"5\n\027MessageCom"
    "batArgentSync\022\014\n\004type\030\001 \002(\t\022\014\n\004data\030\002 \002("
    "\014*u\n\nCombatType\022\023\n\017COMBAT_TYPE_MIN\020\000\022\023\n\017"
    "COMBAT_TYPE_PVE\020\001\022\023\n\017COMBAT_TYPE_PVP\020\002\022\023"
    "\n\017COMBAT_TYPE_GVG\020\003\022\023\n\017COMBAT_TYPE_MAX\020\004"
    "*\255\001\n\026CombatDeployResultType\022!\n\035COMBAT_DE"
    "PLOY_RESULT_TYPE_MIN\020\000\022&\n\"COMBAT_DEPLOY_"
    "RESULT_TYPE_COMPLETE\020\001\022%\n!COMBAT_DEPLOY_"
    "RESULT_TYPE_FAILURE\020\002\022!\n\035COMBAT_DEPLOY_R"
    "ESULT_TYPE_MAX\020\003", 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  CombatRoleData::default_instance_ = new CombatRoleData();
  CombatCampData::default_instance_ = new CombatCampData();
  CombatInitialData::default_instance_ = new CombatInitialData();
  MessageCombatDeployRequest::default_instance_ = new MessageCombatDeployRequest();
  MessageCombatDeployResponse::default_instance_ = new MessageCombatDeployResponse();
  MessageCombatConnectArgentRequest::default_instance_ = new MessageCombatConnectArgentRequest();
  MessageCombatConnectArgentResponse::default_instance_ = new MessageCombatConnectArgentResponse();
  MessageCombatArgentRequest::default_instance_ = new MessageCombatArgentRequest();
  MessageCombatArgentSync::default_instance_ = new MessageCombatArgentSync();
  CombatRoleData::default_instance_->InitAsDefaultInstance();
  CombatCampData::default_instance_->InitAsDefaultInstance();
  CombatInitialData::default_instance_->InitAsDefaultInstance();
  MessageCombatDeployRequest::default_instance_->InitAsDefaultInstance();
  MessageCombatDeployResponse::default_instance_->InitAsDefaultInstance();
  MessageCombatConnectArgentRequest::default_instance_->InitAsDefaultInstance();
  MessageCombatConnectArgentResponse::default_instance_->InitAsDefaultInstance();
  MessageCombatArgentRequest::default_instance_->InitAsDefaultInstance();
  MessageCombatArgentSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* CombatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatType_descriptor_;
}
bool CombatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CombatDeployResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatDeployResultType_descriptor_;
}
bool CombatDeployResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CombatRoleData::kArgentIdFieldNumber;
const int CombatRoleData::kAiFieldNumber;
const int CombatRoleData::kWarriorFieldNumber;
#endif  // !_MSC_VER

CombatRoleData::CombatRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatRoleData::InitAsDefaultInstance() {
}

CombatRoleData::CombatRoleData(const CombatRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatRoleData::SharedCtor() {
  _cached_size_ = 0;
  argent_id_ = GOOGLE_ULONGLONG(0);
  ai_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatRoleData::~CombatRoleData() {
  SharedDtor();
}

void CombatRoleData::SharedDtor() {
  if (ai_ != &::google::protobuf::internal::kEmptyString) {
    delete ai_;
  }
  if (this != default_instance_) {
  }
}

void CombatRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatRoleData_descriptor_;
}

const CombatRoleData& CombatRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CombatRoleData* CombatRoleData::default_instance_ = NULL;

CombatRoleData* CombatRoleData::New() const {
  return new CombatRoleData;
}

void CombatRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    argent_id_ = GOOGLE_ULONGLONG(0);
    if (has_ai()) {
      if (ai_ != &::google::protobuf::internal::kEmptyString) {
        ai_->clear();
      }
    }
  }
  warrior_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 argent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &argent_id_)));
          set_has_argent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ai;
        break;
      }

      // required string ai = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ai()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ai().data(), this->ai().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_warrior;
        break;
      }

      // repeated .protocol.WarriorDescription warrior = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warrior:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warrior()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_warrior;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 argent_id = 1;
  if (has_argent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->argent_id(), output);
  }

  // required string ai = 2;
  if (has_ai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ai().data(), this->ai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ai(), output);
  }

  // repeated .protocol.WarriorDescription warrior = 3;
  for (int i = 0; i < this->warrior_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->warrior(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 argent_id = 1;
  if (has_argent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->argent_id(), target);
  }

  // required string ai = 2;
  if (has_ai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ai().data(), this->ai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ai(), target);
  }

  // repeated .protocol.WarriorDescription warrior = 3;
  for (int i = 0; i < this->warrior_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->warrior(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatRoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 argent_id = 1;
    if (has_argent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->argent_id());
    }

    // required string ai = 2;
    if (has_ai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ai());
    }

  }
  // repeated .protocol.WarriorDescription warrior = 3;
  total_size += 1 * this->warrior_size();
  for (int i = 0; i < this->warrior_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warrior(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatRoleData::MergeFrom(const CombatRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  warrior_.MergeFrom(from.warrior_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_argent_id()) {
      set_argent_id(from.argent_id());
    }
    if (from.has_ai()) {
      set_ai(from.ai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatRoleData::CopyFrom(const CombatRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatRoleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CombatRoleData::Swap(CombatRoleData* other) {
  if (other != this) {
    std::swap(argent_id_, other->argent_id_);
    std::swap(ai_, other->ai_);
    warrior_.Swap(&other->warrior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatRoleData_descriptor_;
  metadata.reflection = CombatRoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatCampData::kIdFieldNumber;
const int CombatCampData::kRoleFieldNumber;
#endif  // !_MSC_VER

CombatCampData::CombatCampData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatCampData::InitAsDefaultInstance() {
}

CombatCampData::CombatCampData(const CombatCampData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatCampData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatCampData::~CombatCampData() {
  SharedDtor();
}

void CombatCampData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatCampData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatCampData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatCampData_descriptor_;
}

const CombatCampData& CombatCampData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CombatCampData* CombatCampData::default_instance_ = NULL;

CombatCampData* CombatCampData::New() const {
  return new CombatCampData;
}

void CombatCampData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatCampData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // repeated .tutorial.orcas.combat.protocol.CombatRoleData role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatCampData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .tutorial.orcas.combat.protocol.CombatRoleData role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatCampData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .tutorial.orcas.combat.protocol.CombatRoleData role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatCampData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .tutorial.orcas.combat.protocol.CombatRoleData role = 2;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatCampData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatCampData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatCampData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatCampData::MergeFrom(const CombatCampData& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatCampData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatCampData::CopyFrom(const CombatCampData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatCampData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  return true;
}

void CombatCampData::Swap(CombatCampData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatCampData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatCampData_descriptor_;
  metadata.reflection = CombatCampData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatInitialData::kMapIdFieldNumber;
const int CombatInitialData::kCombatTypeFieldNumber;
const int CombatInitialData::kCampFieldNumber;
#endif  // !_MSC_VER

CombatInitialData::CombatInitialData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombatInitialData::InitAsDefaultInstance() {
}

CombatInitialData::CombatInitialData(const CombatInitialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombatInitialData::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  combat_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatInitialData::~CombatInitialData() {
  SharedDtor();
}

void CombatInitialData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatInitialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatInitialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatInitialData_descriptor_;
}

const CombatInitialData& CombatInitialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CombatInitialData* CombatInitialData::default_instance_ = NULL;

CombatInitialData* CombatInitialData::New() const {
  return new CombatInitialData;
}

void CombatInitialData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    combat_type_ = 0;
  }
  camp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatInitialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combat_type;
        break;
      }

      // required int32 combat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_type_)));
          set_has_combat_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camp;
        break;
      }

      // repeated .tutorial.orcas.combat.protocol.CombatCampData camp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombatInitialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }

  // required int32 combat_type = 2;
  if (has_combat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combat_type(), output);
  }

  // repeated .tutorial.orcas.combat.protocol.CombatCampData camp = 3;
  for (int i = 0; i < this->camp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombatInitialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }

  // required int32 combat_type = 2;
  if (has_combat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->combat_type(), target);
  }

  // repeated .tutorial.orcas.combat.protocol.CombatCampData camp = 3;
  for (int i = 0; i < this->camp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombatInitialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // required int32 combat_type = 2;
    if (has_combat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat_type());
    }

  }
  // repeated .tutorial.orcas.combat.protocol.CombatCampData camp = 3;
  total_size += 1 * this->camp_size();
  for (int i = 0; i < this->camp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatInitialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatInitialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatInitialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatInitialData::MergeFrom(const CombatInitialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  camp_.MergeFrom(from.camp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_combat_type()) {
      set_combat_type(from.combat_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatInitialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatInitialData::CopyFrom(const CombatInitialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatInitialData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < camp_size(); i++) {
    if (!this->camp(i).IsInitialized()) return false;
  }
  return true;
}

void CombatInitialData::Swap(CombatInitialData* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(combat_type_, other->combat_type_);
    camp_.Swap(&other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatInitialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatInitialData_descriptor_;
  metadata.reflection = CombatInitialData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCombatDeployRequest::kHostIdFieldNumber;
const int MessageCombatDeployRequest::kCombatInitialDataFieldNumber;
#endif  // !_MSC_VER

MessageCombatDeployRequest::MessageCombatDeployRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatDeployRequest::InitAsDefaultInstance() {
  combat_initial_data_ = const_cast< ::tutorial::orcas::combat::protocol::CombatInitialData*>(&::tutorial::orcas::combat::protocol::CombatInitialData::default_instance());
}

MessageCombatDeployRequest::MessageCombatDeployRequest(const MessageCombatDeployRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatDeployRequest::SharedCtor() {
  _cached_size_ = 0;
  host_id_ = 0;
  combat_initial_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatDeployRequest::~MessageCombatDeployRequest() {
  SharedDtor();
}

void MessageCombatDeployRequest::SharedDtor() {
  if (this != default_instance_) {
    delete combat_initial_data_;
  }
}

void MessageCombatDeployRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatDeployRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatDeployRequest_descriptor_;
}

const MessageCombatDeployRequest& MessageCombatDeployRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatDeployRequest* MessageCombatDeployRequest::default_instance_ = NULL;

MessageCombatDeployRequest* MessageCombatDeployRequest::New() const {
  return new MessageCombatDeployRequest;
}

void MessageCombatDeployRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_id_ = 0;
    if (has_combat_initial_data()) {
      if (combat_initial_data_ != NULL) combat_initial_data_->::tutorial::orcas::combat::protocol::CombatInitialData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatDeployRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 host_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_combat_initial_data;
        break;
      }

      // required .tutorial.orcas.combat.protocol.CombatInitialData combat_initial_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combat_initial_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combat_initial_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatDeployRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->host_id(), output);
  }

  // required .tutorial.orcas.combat.protocol.CombatInitialData combat_initial_data = 2;
  if (has_combat_initial_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->combat_initial_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatDeployRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->host_id(), target);
  }

  // required .tutorial.orcas.combat.protocol.CombatInitialData combat_initial_data = 2;
  if (has_combat_initial_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->combat_initial_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatDeployRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 host_id = 1;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->host_id());
    }

    // required .tutorial.orcas.combat.protocol.CombatInitialData combat_initial_data = 2;
    if (has_combat_initial_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combat_initial_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatDeployRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatDeployRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatDeployRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatDeployRequest::MergeFrom(const MessageCombatDeployRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
    if (from.has_combat_initial_data()) {
      mutable_combat_initial_data()->::tutorial::orcas::combat::protocol::CombatInitialData::MergeFrom(from.combat_initial_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatDeployRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatDeployRequest::CopyFrom(const MessageCombatDeployRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatDeployRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_combat_initial_data()) {
    if (!this->combat_initial_data().IsInitialized()) return false;
  }
  return true;
}

void MessageCombatDeployRequest::Swap(MessageCombatDeployRequest* other) {
  if (other != this) {
    std::swap(host_id_, other->host_id_);
    std::swap(combat_initial_data_, other->combat_initial_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatDeployRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatDeployRequest_descriptor_;
  metadata.reflection = MessageCombatDeployRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCombatDeployResponse::kHostIdFieldNumber;
const int MessageCombatDeployResponse::kResultTypeFieldNumber;
const int MessageCombatDeployResponse::kCombatIdFieldNumber;
#endif  // !_MSC_VER

MessageCombatDeployResponse::MessageCombatDeployResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatDeployResponse::InitAsDefaultInstance() {
}

MessageCombatDeployResponse::MessageCombatDeployResponse(const MessageCombatDeployResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatDeployResponse::SharedCtor() {
  _cached_size_ = 0;
  host_id_ = 0;
  result_type_ = 0;
  combat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatDeployResponse::~MessageCombatDeployResponse() {
  SharedDtor();
}

void MessageCombatDeployResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageCombatDeployResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatDeployResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatDeployResponse_descriptor_;
}

const MessageCombatDeployResponse& MessageCombatDeployResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatDeployResponse* MessageCombatDeployResponse::default_instance_ = NULL;

MessageCombatDeployResponse* MessageCombatDeployResponse::New() const {
  return new MessageCombatDeployResponse;
}

void MessageCombatDeployResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_id_ = 0;
    result_type_ = 0;
    combat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatDeployResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 host_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // required int32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combat_id;
        break;
      }

      // optional int32 combat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_id_)));
          set_has_combat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatDeployResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->host_id(), output);
  }

  // required int32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_type(), output);
  }

  // optional int32 combat_id = 3;
  if (has_combat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatDeployResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 host_id = 1;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->host_id(), target);
  }

  // required int32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_type(), target);
  }

  // optional int32 combat_id = 3;
  if (has_combat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatDeployResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 host_id = 1;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->host_id());
    }

    // required int32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_type());
    }

    // optional int32 combat_id = 3;
    if (has_combat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatDeployResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatDeployResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatDeployResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatDeployResponse::MergeFrom(const MessageCombatDeployResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_combat_id()) {
      set_combat_id(from.combat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatDeployResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatDeployResponse::CopyFrom(const MessageCombatDeployResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatDeployResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageCombatDeployResponse::Swap(MessageCombatDeployResponse* other) {
  if (other != this) {
    std::swap(host_id_, other->host_id_);
    std::swap(result_type_, other->result_type_);
    std::swap(combat_id_, other->combat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatDeployResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatDeployResponse_descriptor_;
  metadata.reflection = MessageCombatDeployResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCombatConnectArgentRequest::kArgentIdFieldNumber;
#endif  // !_MSC_VER

MessageCombatConnectArgentRequest::MessageCombatConnectArgentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatConnectArgentRequest::InitAsDefaultInstance() {
}

MessageCombatConnectArgentRequest::MessageCombatConnectArgentRequest(const MessageCombatConnectArgentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatConnectArgentRequest::SharedCtor() {
  _cached_size_ = 0;
  argent_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatConnectArgentRequest::~MessageCombatConnectArgentRequest() {
  SharedDtor();
}

void MessageCombatConnectArgentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageCombatConnectArgentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatConnectArgentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatConnectArgentRequest_descriptor_;
}

const MessageCombatConnectArgentRequest& MessageCombatConnectArgentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatConnectArgentRequest* MessageCombatConnectArgentRequest::default_instance_ = NULL;

MessageCombatConnectArgentRequest* MessageCombatConnectArgentRequest::New() const {
  return new MessageCombatConnectArgentRequest;
}

void MessageCombatConnectArgentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    argent_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatConnectArgentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 argent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &argent_id_)));
          set_has_argent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatConnectArgentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 argent_id = 1;
  if (has_argent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->argent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatConnectArgentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 argent_id = 1;
  if (has_argent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->argent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatConnectArgentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 argent_id = 1;
    if (has_argent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->argent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatConnectArgentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatConnectArgentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatConnectArgentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatConnectArgentRequest::MergeFrom(const MessageCombatConnectArgentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_argent_id()) {
      set_argent_id(from.argent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatConnectArgentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatConnectArgentRequest::CopyFrom(const MessageCombatConnectArgentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatConnectArgentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageCombatConnectArgentRequest::Swap(MessageCombatConnectArgentRequest* other) {
  if (other != this) {
    std::swap(argent_id_, other->argent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatConnectArgentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatConnectArgentRequest_descriptor_;
  metadata.reflection = MessageCombatConnectArgentRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageCombatConnectArgentResponse_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatConnectArgentResponse_ErrorCode_descriptor_;
}
bool MessageCombatConnectArgentResponse_ErrorCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MessageCombatConnectArgentResponse_ErrorCode MessageCombatConnectArgentResponse::ERROR_CODE_COMPLETE;
const MessageCombatConnectArgentResponse_ErrorCode MessageCombatConnectArgentResponse::ERROR_CODE_FAILURE;
const MessageCombatConnectArgentResponse_ErrorCode MessageCombatConnectArgentResponse::ErrorCode_MIN;
const MessageCombatConnectArgentResponse_ErrorCode MessageCombatConnectArgentResponse::ErrorCode_MAX;
const int MessageCombatConnectArgentResponse::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MessageCombatConnectArgentResponse::kRetCodeFieldNumber;
#endif  // !_MSC_VER

MessageCombatConnectArgentResponse::MessageCombatConnectArgentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatConnectArgentResponse::InitAsDefaultInstance() {
}

MessageCombatConnectArgentResponse::MessageCombatConnectArgentResponse(const MessageCombatConnectArgentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatConnectArgentResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatConnectArgentResponse::~MessageCombatConnectArgentResponse() {
  SharedDtor();
}

void MessageCombatConnectArgentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageCombatConnectArgentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatConnectArgentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatConnectArgentResponse_descriptor_;
}

const MessageCombatConnectArgentResponse& MessageCombatConnectArgentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatConnectArgentResponse* MessageCombatConnectArgentResponse::default_instance_ = NULL;

MessageCombatConnectArgentResponse* MessageCombatConnectArgentResponse::New() const {
  return new MessageCombatConnectArgentResponse;
}

void MessageCombatConnectArgentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatConnectArgentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatConnectArgentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatConnectArgentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatConnectArgentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatConnectArgentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatConnectArgentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatConnectArgentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatConnectArgentResponse::MergeFrom(const MessageCombatConnectArgentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatConnectArgentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatConnectArgentResponse::CopyFrom(const MessageCombatConnectArgentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatConnectArgentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageCombatConnectArgentResponse::Swap(MessageCombatConnectArgentResponse* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatConnectArgentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatConnectArgentResponse_descriptor_;
  metadata.reflection = MessageCombatConnectArgentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCombatArgentRequest::kTypeFieldNumber;
const int MessageCombatArgentRequest::kDataFieldNumber;
#endif  // !_MSC_VER

MessageCombatArgentRequest::MessageCombatArgentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatArgentRequest::InitAsDefaultInstance() {
}

MessageCombatArgentRequest::MessageCombatArgentRequest(const MessageCombatArgentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatArgentRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatArgentRequest::~MessageCombatArgentRequest() {
  SharedDtor();
}

void MessageCombatArgentRequest::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MessageCombatArgentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatArgentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatArgentRequest_descriptor_;
}

const MessageCombatArgentRequest& MessageCombatArgentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatArgentRequest* MessageCombatArgentRequest::default_instance_ = NULL;

MessageCombatArgentRequest* MessageCombatArgentRequest::New() const {
  return new MessageCombatArgentRequest;
}

void MessageCombatArgentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatArgentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatArgentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatArgentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatArgentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatArgentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatArgentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatArgentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatArgentRequest::MergeFrom(const MessageCombatArgentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatArgentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatArgentRequest::CopyFrom(const MessageCombatArgentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatArgentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageCombatArgentRequest::Swap(MessageCombatArgentRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatArgentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatArgentRequest_descriptor_;
  metadata.reflection = MessageCombatArgentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCombatArgentSync::kTypeFieldNumber;
const int MessageCombatArgentSync::kDataFieldNumber;
#endif  // !_MSC_VER

MessageCombatArgentSync::MessageCombatArgentSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageCombatArgentSync::InitAsDefaultInstance() {
}

MessageCombatArgentSync::MessageCombatArgentSync(const MessageCombatArgentSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCombatArgentSync::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCombatArgentSync::~MessageCombatArgentSync() {
  SharedDtor();
}

void MessageCombatArgentSync::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MessageCombatArgentSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageCombatArgentSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageCombatArgentSync_descriptor_;
}

const MessageCombatArgentSync& MessageCombatArgentSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageCombatArgentSync* MessageCombatArgentSync::default_instance_ = NULL;

MessageCombatArgentSync* MessageCombatArgentSync::New() const {
  return new MessageCombatArgentSync;
}

void MessageCombatArgentSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageCombatArgentSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCombatArgentSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageCombatArgentSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageCombatArgentSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCombatArgentSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageCombatArgentSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageCombatArgentSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageCombatArgentSync::MergeFrom(const MessageCombatArgentSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageCombatArgentSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCombatArgentSync::CopyFrom(const MessageCombatArgentSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCombatArgentSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageCombatArgentSync::Swap(MessageCombatArgentSync* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageCombatArgentSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageCombatArgentSync_descriptor_;
  metadata.reflection = MessageCombatArgentSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace combat
}  // namespace orcas
}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
